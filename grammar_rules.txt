factor: PLUS factor
      | MINUS factor
      | INT
      | LPAR expression RPAR
      | VAR

term: factor ((PLUS|MINUS) factor)*

expression: term ((MULT|DIV) term)*

logic-expression: expression LOGIC expression

increment-expression: factor (INC|DEC|INCBY|DECBY)

arr-expression: [expression (, expression)*?]

arr-index: arr[expression]

assignment: var ASSGN expression
          | var INC
          | var INCBY factor

if: if logic-expression { body } (elif logic-expression { body })*? (else { body })?

for: FOR (assignment, logic-expression, increment-expression) { loop body }

while: while condition { loop body }

func: func var ((expression, )*?) { func body }

func-call: var((expression, )*?)

statement: compound_statement
         | increment-expression
         | assignment
         | if
         | while
         | for
         | func
         | func-call

        
compound_statement: statement; (statement;)*?








